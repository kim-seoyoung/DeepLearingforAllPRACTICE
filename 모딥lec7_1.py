# -*- coding: utf-8 -*-
"""모딥lec7-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z3m2A1BIKrX4kI-l9MxSRQsczSYFHtKX
"""

import tensorflow as tf

"""### SoftMax"""

tf.set_random_seed(1123)

x_data = [[1, 2, 1],
          [1, 3, 2],
          [1, 3, 4],
          [1, 5, 5],
          [1, 7, 5],
          [1, 2, 5],
          [1, 6, 6],
          [1, 7, 7]]
y_data = [[0, 0, 1],
          [0, 0, 1],
          [0, 0, 1],
          [0, 1, 0],
          [0, 1, 0],
          [0, 1, 0],
          [1, 0, 0],
          [1, 0, 0]]

x_test = [[2, 1, 1],
          [3, 1, 2],
          [3, 3, 4]]
y_test = [[0, 0, 1],
          [0, 0, 1],
          [0, 0, 1]]

x = tf.placeholder('float',[None,3])
y = tf.placeholder('float',[None,3])
w = tf.Variable(tf.random_normal([3,3]))
b = tf.Variable(tf.random_normal([3]))

hypothesis = tf.nn.softmax(tf.matmul(x,w) + b)
cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(hypothesis), axis = 1))
optimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.1).minimize(cost)

prediction = tf.arg_max(hypothesis, 1)
is_correct = tf.equal(prediction, tf.arg_max(y, 1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(201):
    cost_val, w_val, _ = sess.run([cost, w, optimizer], feed_dict = {x: x_data, y: y_data})
    print(step, cost_val, w_val)
    
  print('Prediction:', sess.run(prediction, feed_dict = {x: x_data}))
  print('Accuracy:', sess.run(accuracy, feed_dict = {x:x_test, y:y_test}))

with tf.Session() as sess:   
  sess.run(tf.global_variables_initializer())
  print('Prediction:', sess.run(prediction, feed_dict = {x: x_data}))
  print('Accuracy:', sess.run(accuracy, feed_dict = {x:x_test, y:y_test}))

#learning rate 크기 변화
hypothesis = tf.nn.softmax(tf.matmul(x,w) + b)
cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(hypothesis), axis = 1))
optimizer = tf.train.GradientDescentOptimizer(learning_rate = 1.5).minimize(cost)
prediction = tf.arg_max(hypothesis, 1)
is_correct = tf.equal(prediction, tf.arg_max(y, 1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(201):
    cost_val, w_val, _ = sess.run([cost, w, optimizer], feed_dict = {x: x_data, y: y_data})
    print(step, cost_val, w_val)
    
  print('Prediction:', sess.run(prediction, feed_dict = {x: x_data}))
  print('Accuracy:', sess.run(accuracy, feed_dict = {x:x_test, y:y_test}))

"""### Normalization"""

import numpy as np

xy = np.array([[828.659973, 833.450012, 908100, 828.349976, 831.659973],
               [823.02002, 828.070007, 1828100, 821.655029, 828.070007],
               [819.929993, 824.400024, 1438100, 818.97998, 824.159973],
               [816, 820.958984, 1008100, 815.48999, 819.23999],
               [819.359985, 823, 1188100, 818.469971, 818.97998],
               [819, 823, 1198100, 816, 820.450012],
               [811.700012, 815.25, 1098100, 809.780029, 813.669983],
               [809.51001, 816.659973, 1398100, 804.539978, 809.559998]])

x_data = xy[:,0:-1]
y_data = xy[:, [-1]]  #[-1]을 적어서 (8,1) 행렬이 됨. 아니면 (1,8)

x_data

y_data

x = tf.placeholder(tf.float32, shape=[None, 4])
y = tf.placeholder(tf.float32, shape = [None,1])
w = tf.Variable(tf.random_normal([4,1]), name = 'weight')
b = tf.Variable(tf.random_normal([1]), name = 'bias')

hypothesis = tf.matmul(x, w) + b
cost = tf.reduce_mean(tf.square(hypothesis - y))

optimizer = tf.train.GradientDescentOptimizer(learning_rate = 1.5).minimize(cost)

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for step in range(2001):
    cost_val, hy_val, _ = sess.run([cost, hypothesis, optimizer], feed_dict = {x:x_data, y:y_data})
    print(step, 'Cost: ', cost_val,"\nPrediction\n", hy_val)

#Normalization
def MinMaxScaler(data):
  numerator = data - np.min(data,0)
  denominator = np.max(data,0) - np.min(data,0)
  
  return numerator/(denominator+1e-7)

xy = MinMaxScaler(xy)
print(xy)

