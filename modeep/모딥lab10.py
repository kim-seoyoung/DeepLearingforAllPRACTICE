# -*- coding: utf-8 -*-
"""모딥lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lz7szGGDAi0IlwdRBduaVA7C11sS_PyB
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import random

import warnings
warnings.filterwarnings(action = 'ignore')

from tensorflow.examples.tutorials.mnist import input_data

tf.set_random_seed(777)
mnist = input_data.read_data_sets('MNIST_data/', one_hot = True)

nb_classes = 10

X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.Variable(tf.random_normal([784, nb_classes*10]))
b1 = tf.Variable(tf.random_normal([nb_classes*10]))
layer1 = tf.nn.softmax(tf.matmul(X, W1) + b1)

W2 = tf.Variable(tf.random_normal([nb_classes*10,nb_classes]))
b2 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.nn.softmax(tf.matmul(layer1, W2) + b2)

cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.Variable(tf.random_normal([784, 256]))
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)

W2 = tf.Variable(tf.random_normal([256,256]))
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(layer1, W2) + b2)

W3 = tf.Variable(tf.random_normal([256,nb_classes]))
b3 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.matmul(layer2, W3) + b3

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = hypothesis, labels = Y))
optimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.Variable(tf.random_normal([784, 256]))
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)

W2 = tf.Variable(tf.random_normal([256,256]))
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(layer1, W2) + b2)

W3 = tf.Variable(tf.random_normal([256,nb_classes]))
b3 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.nn.softmax(tf.matmul(layer2, W3) + b3)

cost = tf.reduce_mean(-tf.reduce_sum(Y*tf.log(hypothesis), axis = 1))
optimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

#왜 softmax cross entropy with logits는 되고 직접 하면 안되지..? 다른 것들은 큰 차이 없다

tf.reset_default_graph()
X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.get_variable("W1", shape = [784,256], initializer = tf.contrib.layers.xavier_initializer())
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)

W2 = tf.get_variable("W2", shape = [256,256], initializer = tf.contrib.layers.xavier_initializer())
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(layer1, W2) + b2)

W3 = tf.get_variable("W3", shape = [256,nb_classes], initializer = tf.contrib.layers.xavier_initializer())
b3 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.nn.softmax(tf.matmul(layer2, W3) + b3)

cost = tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis=1))
optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

tf.reset_default_graph()
X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.get_variable("W1", shape = [784,256], initializer = tf.contrib.layers.xavier_initializer())
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)

W2 = tf.get_variable("W2", shape = [256,256], initializer = tf.contrib.layers.xavier_initializer())
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(layer1, W2) + b2)

W3 = tf.get_variable("W3", shape = [256,nb_classes], initializer = tf.contrib.layers.xavier_initializer())
b3 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.matmul(layer2, W3) + b3

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = hypothesis, labels = Y))
optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

tf.reset_default_graph()
X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

W1 = tf.get_variable("W1", shape = [784,256], initializer = tf.contrib.layers.xavier_initializer())
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)

W2 = tf.get_variable("W2", shape = [256,256], initializer = tf.contrib.layers.xavier_initializer())
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(layer1, W2) + b2)

W3 = tf.get_variable("W3", shape = [256,512], initializer = tf.contrib.layers.xavier_initializer())
b3 = tf.Variable(tf.random_normal([512]))
layer3 = tf.nn.relu(tf.matmul(layer2, W3) + b3)

W4 = tf.get_variable("W4", shape = [512,512], initializer = tf.contrib.layers.xavier_initializer())
b4 = tf.Variable(tf.random_normal([512]))
layer4 = tf.nn.relu(tf.matmul(layer3, W4) + b4)

W5 = tf.get_variable("W5", shape = [512,nb_classes], initializer = tf.contrib.layers.xavier_initializer())
b5 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.matmul(layer4, W5) + b5

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = hypothesis, labels = Y))
optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels}))

tf.reset_default_graph()
X = tf.placeholder(tf.float32, [None, 784])
Y = tf.placeholder(tf.float32,[None, nb_classes])

keep_prob = tf.placeholder(tf.float32)

W1 = tf.get_variable("W1", shape = [784,256], initializer = tf.contrib.layers.xavier_initializer())
b1 = tf.Variable(tf.random_normal([256]))
layer1 = tf.nn.relu(tf.matmul(X, W1) + b1)
l1 = tf.nn.dropout(layer1, keep_prob = keep_prob)

W2 = tf.get_variable("W2", shape = [256,256], initializer = tf.contrib.layers.xavier_initializer())
b2 = tf.Variable(tf.random_normal([256]))
layer2 = tf.nn.relu(tf.matmul(l1, W2) + b2)
l2 = tf.nn.dropout(layer2, keep_prob = keep_prob)

W3 = tf.get_variable("W3", shape = [256,512], initializer = tf.contrib.layers.xavier_initializer())
b3 = tf.Variable(tf.random_normal([512]))
layer3 = tf.nn.relu(tf.matmul(l2, W3) + b3)
l3 = tf.nn.dropout(layer3, keep_prob = keep_prob)

W4 = tf.get_variable("W4", shape = [512,512], initializer = tf.contrib.layers.xavier_initializer())
b4 = tf.Variable(tf.random_normal([512]))
layer4 = tf.nn.relu(tf.matmul(l3, W4) + b4)
l4 = tf.nn.dropout(layer4, keep_prob = keep_prob)

W5 = tf.get_variable("W5", shape = [512,nb_classes], initializer = tf.contrib.layers.xavier_initializer())
b5 = tf.Variable(tf.random_normal([nb_classes]))
hypothesis = tf.matmul(l4, W5) + b5

cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = hypothesis, labels = Y))
optimizer = tf.train.AdamOptimizer(learning_rate=0.0001).minimize(cost)

is_correct = tf.equal(tf.argmax(hypothesis,1), tf.argmax(Y,1))
accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))

training_epochs = 15
batch_size = 100

with tf.Session() as sess:
  sess.run(tf.global_variables_initializer())
  for epoch in range(training_epochs):
    avgcost = 0
    totalbatch = int(mnist.train.num_examples / batch_size)
    
    for i in range(totalbatch):
      batch_xs, batch_ys = mnist.train.next_batch(batch_size)
      c, _ = sess.run([cost, optimizer], feed_dict = {X: batch_xs, Y: batch_ys, keep_prob : 0.7})
      avgcost += c /totalbatch
      
    print('Epoch:','%04d' %(epoch + 1),' cost = ','{:.9f}'.format(avgcost))
  print('Learning Finished!')
  print("Accurary:", sess.run(accuracy, feed_dict = {X: mnist.test.images, Y: mnist.test.labels,keep_prob : 1}))

